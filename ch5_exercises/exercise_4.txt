What's the output of this program?

// Evaluating operands in logical expressions.
#include <iostream>
using namespace std;
int main()
{
cout << boolalpha; // Outputs boolean values
// as true or false
bool res = false;
int y = 5;
res = 7 || (y = 0);
cout << "Result of (7 || (y = 0)): " << res
<< endl;
cout << "Value of y: " << y << endl;
int a, b, c;
a = b = c = 0;
res = ++a || ++b && ++c;
cout << '\n'
<< " res = " << res
<< ", a = " << a
<< ", b = " << b
<< ", c = " << c << endl;
a = b = c = 0;
res = ++a && ++b || ++c;
cout << " res = " << res
<< ", a = " << a
<< ", b = " << b
<< ", c = " << c << endl;
return 0;
}

Result of (7 || (y = 0)): true //(true because any int >0 is true)
Value of y: 5

   res = true //++a means 1 which is true, don't have to care about other side
,    a = 1 
,    b = 0 
,    c = 0 

   res = true //++a means 1 which is true, don't have to care about other side
,    a = 0 
,    b = 0 
,    c = 1

i got the second part wrong. instead, it's a,b,c = 1,1,0. don't 100% know why but my hypothesis is the fact that because OR requires just a single true, the other side doesn't get checked. so in this case, because ++a == ++b, then ntohing happens to the other side i.e. ++c which is why those 2 are 1.
this also makes sense for the one above since ++a is one which itself is true (since all ints >0 are true).